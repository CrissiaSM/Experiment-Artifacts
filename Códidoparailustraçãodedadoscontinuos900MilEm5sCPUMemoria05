import time
import psutil
import concurrent.futures

# Número total de logins a serem simulados
TOTAL_LOGINS = 900_000
# Duração total do teste em segundos
DURATION = 5
# Intervalo de monitoramento da CPU e memória
MONITOR_INTERVAL = 0.5
# Número de threads para simular logins
NUM_THREADS = 5000  # Ajustável conforme o sistema

# Função que simula um login (processo fictício)
def simulate_login(user_id):
    return f"Usuário {user_id} logado"

# Função para monitorar CPU e memória
def monitor_system(duration, interval):
    start_time = time.time()
    while time.time() - start_time < duration:
        cpu_usage = psutil.cpu_percent(interval=0.5)  # Uso da CPU
        memory_usage = psutil.virtual_memory().percent  # Uso da Memória RAM
        print(f"[{time.time() - start_time:.1f}s] CPU: {cpu_usage}% | Memória: {memory_usage}%")
        time.sleep(interval - 0.5)  # Ajuste para manter o intervalo correto

# Executa a simulação de logins com múltiplas threads
def run_simulation():
    start_time = time.time()
    with concurrent.futures.ThreadPoolExecutor(max_workers=NUM_THREADS) as executor:
        future_to_user = {executor.submit(simulate_login, user_id): user_id for user_id in range(TOTAL_LOGINS)}

        for future in concurrent.futures.as_completed(future_to_user):
            _ = future.result()
            if time.time() - start_time >= DURATION:
                break

# Iniciar monitoramento e simulação simultaneamente
if __name__ == "__main__":
    with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
        executor.submit(monitor_system, DURATION, MONITOR_INTERVAL)
        executor.submit(run_simulation)
